version: "3.9"

services:
  backend:
    container_name:
      ${BACKEND_NAME}
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: backend
    ports:
      - "8083:8082"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - containers-network
      - db-network
    env_file:
      - .env

  pinger:
    container_name:
      svc-pinger
    build:
      context: .
      dockerfile: pinger/Dockerfile
    image: pinger
    depends_on:
      backend:
        condition: service_started
    networks:
      - containers-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env

  check-1:
    image: alpine
    command: [ "sh", "-c", "while true; do sleep 3600; done" ]
    networks:
      - containers-network

  check-2:
    image: alpine
    command: [ "sh", "-c", "while true; do sleep 3600; done" ]
    networks:
      - containers-network

  db:
    image: postgres:16.6-alpine3.21
    restart: always
    container_name: db-postgres
    networks:
      - db-network
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - containers:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${DB}
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  containers:
networks:
  containers-network:
  db-network: