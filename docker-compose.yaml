version: "3.9"

services:
  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - containers-network
    env_file:
      - .env
    environment:
      - BACKEND_HOST=${BACKEND_HOST}
      - BACKEND_PORT=${BACKEND_PORT}
      - REACT_APP_API_LOCATION=${REACT_APP_API_LOCATION}
      - REACT_APP_REFRESH_INTERVAL=${REACT_APP_REFRESH_INTERVAL}
    command: sh -c "envsubst '$$REACT_APP_API_LOCATION $$BACKEND_HOST $$BACKEND_PORT' < /etc/nginx/nginx.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  backend:
    container_name:
      ${BACKEND_HOST}
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: backend
    ports:
      - "8083:8082"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    stop_signal: SIGTERM
    networks:
      - containers-network
      - db-network
    env_file:
      - .env

  pinger:
    container_name:
      pinger
    build:
      context: .
      dockerfile: pinger/Dockerfile
    image: pinger
    depends_on:
      backend:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - containers-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env

  db:
    image: postgres:16.6-alpine3.21
    restart: always
    container_name: db-postgres
    hostname: ${PG_CONTAINER}
    networks:
      - db-network
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - containers:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${DB}
      interval: 5s
      timeout: 3s
      retries: 5
  rabbitmq:
    image: rabbitmq:3.13.7-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - containers-network

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    ports:
      - "9000:8080"
    environment:
      SWAGGER_JSON: /docs/openapi.yaml
    volumes:
      - ./docs:/docs
    logging:
      driver: none

  asyncapi-ui:
    image: asyncapi/studio
    container_name: asyncapi-ui
    ports:
      - "9001:80"
    environment:
      ASYNCAPI_FILE_URL: usr/share/nginx/html/docs/asyncapi.yaml
    volumes:
      - ./docs:/usr/share/nginx/html/docs
    logging:
      driver:  none

volumes:
  containers:
networks:
  containers-network:
  containers-test:
  db-network: